name: AzureCLISample
on: [push]

#  az ad sp create-for-rbac \
#    --name "http://hello" --role contributor \
#    --scopes /subscriptions/5465f0aa-77ae-4324-bcf4-1cd1aa584f44/resourceGroups/stcu-demo-rg \
#    --sdk-auth
#

env:
  AZURE_RESOURCE_GROUP: stcu-demo-rg
  APIM_NAME: stcu-hello-apim
  APP_FUNCTION_URL: https://stcu-hello.azurewebsites.net/api
  APIM_API_NAME: hello-one
  APIM_MOCK_API_NAME: hello-mock
  OPERATION_ID: HelloOne001
  BACKEND_ID: Backend001
  POLICY_PATH: "./policies"
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Installing PS module
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module Az.ApiManagement

      - name: Login
        shell: pwsh
        run: |
          $tenantId = "c8e540af-20d5-4cb6-aa7a-d96eec0a1457"
          $passwd = ConvertTo-SecureString ${{ secrets.MYAPP_CLIENT_SECRET }} -AsPlainText -Force
          $pscredential = New-Object System.Management.Automation.PSCredential('49fa7898-3943-470e-b45c-ea670781208a', $passwd)
          Connect-AzAccount -ServicePrincipal -Credential $pscredential -Tenant $tenantId

      - name: Create APIM
        shell: pwsh
        run: |
          New-AzApiManagement -ResourceGroupName stcu-demo-rg -Name stcu-hello-apim -Location 'West US' -Sku Consumption -Organization STCU -AdminEmail contoso@contoso.com -AssignIdentity

      - name: Create API with Function backend
        shell: pwsh
        run: |
          $ApiMgmtContext = New-AzApiManagementContext -ResourceGroupName ${{ env.AZURE_RESOURCE_GROUP }} `
            -ServiceName ${{ env.APIM_NAME }}
          New-AzApiManagementApi -Context $ApiMgmtContext -Name ${{ env.APIM_API_NAME }} -ApiId ${{ env.APIM_API_NAME }} `
            -ServiceUrl ${{ env.APP_FUNCTION_URL }} -Protocols @("https") -Path ${{ env.APIM_API_NAME }}
          $NameQuery = [PSCustomObject]@{ Name = "name"; Type = "string"; Required = $True }
          New-AzApiManagementOperation -Context $ApiMgmtContext -ApiId ${{ env.APIM_API_NAME }} `
            -OperationId ${{ env.OPERATION_ID }} -Name ${{ env.APIM_API_NAME }} -Method "GET" `
            -UrlTemplate "/HelloOne?name={name}" -TemplateParameters @($NameQuery)
          New-AzApiManagementBackend -Context  $ApiMgmtContext -BackendId ${{ env.BACKEND_ID }} `
            -Protocol http -Url ${{ env.APP_FUNCTION_URL }}
          Set-AzApiManagementPolicy -Context $ApiMgmtContext -ApiId ${{ env.APIM_API_NAME }} `
            -PolicyFilePath "${{ env.POLICY_PATH }}/stcu-hello-apim.xml"
          Set-AzApiManagementPolicy -Context $ApiMgmtContext -ApiId ${{ env.APIM_API_NAME }} `
            -OperationId ${{ env.OPERATION_ID }} -PolicyFilePath "${{ env.POLICY_PATH }}/hello-one.xml"

      - name: Create Mock API
        shell: pwsh
        run: |
          $ApiMgmtContext = New-AzApiManagementContext -ResourceGroupName ${{ env.AZURE_RESOURCE_GROUP }} `
            -ServiceName ${{ env.APIM_NAME }}
          Import-AzApiManagementApi -Context $ApiMgmtContext -SpecificationFormat "OpenApi" `
              -ApiId ${{ env.APIM_MOCK_API_NAME }} -Path ${{ env.APIM_MOCK_API_NAME }} `
              -SpecificationPath "./hello.yml"
          Set-AzApiManagementPolicy -Context $ApiMgmtContext -ApiId ${{ env.APIM_MOCK_API_NAME }} `
            -PolicyFilePath "${{ env.POLICY_PATH }}/stcu-hello-apim.xml"
          Set-AzApiManagementPolicy -Context $ApiMgmtContext -ApiId ${{ env.APIM_MOCK_API_NAME }} `
            -OperationId get-helloone -PolicyFilePath "${{ env.POLICY_PATH }}/hello-mock.xml"

      - name: Create Subscription Key
        shell: pwsh
        run: |
          $ApiMgmtContext = New-AzApiManagementContext -ResourceGroupName ${{ env.AZURE_RESOURCE_GROUP }} `
            -ServiceName ${{ env.APIM_NAME }}
          New-AzApiManagementSubscription -Context $ApiMgmtContext -Scope "/apis" -Name "GlobalApiScope"
